/**
 * Created by Thomas_Meyers on 13/11/2014.
 */

import org.xml.sax.InputSource;
import org.w3c.dom.*;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.Serializable;
import java.io.StringReader;
import java.net.HttpURLConnection;
import java.net.URL;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

public class Game implements Serializable
{
    String FolderName, GameTitle, ID, Deck, cover, directory;

    public Game(String FolderName, String directory)
    {
        this.directory = directory;
        this.FolderName = FolderName;
        getInfo();
    }

    private String getInternetData(String url)
    {
        try
        {
            URL obj = new URL(url);
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();

            con.setRequestMethod("GET");
            con.setRequestProperty("User-Agent", "GameManager");

            BufferedReader in = new BufferedReader(
                    new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuffer response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();
            //System.out.println(response.toString());
            return response.toString();
        }
        catch(Exception x)
        {
            return x.toString();
        }

    }

    private void getInfo()
    {
        String xml;

        xml = getInternetData("http://www.giantbomb.com/api/search/?api_key=f762f684241dc2aee6ba170cfe09e31165a39a44&format=xml&query=" + FolderName + "&resources=game&field_list=name,id,deck,image");

        try
        {
            DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
            InputSource is = new InputSource();
            is.setCharacterStream(new StringReader(xml));

            Document doc = db.parse(is);
            NodeList nodes = doc.getElementsByTagName("game");

            for (int i = 0; i < 1; i++) {
                Element element = (Element) nodes.item(i);

                NodeList name = element.getElementsByTagName("name");
                Element line = (Element) name.item(0);

                GameTitle = getCharacterDataFromElement(line);

                name = element.getElementsByTagName("id");
                line = (Element) name.item(0);

                ID = getCharacterDataFromElement(line);

                name = element.getElementsByTagName("deck");
                line = (Element) name.item(0);

                Deck = getCharacterDataFromElement(line);

                name = element.getElementsByTagName("super_url");
                line = (Element) name.item(0);

                cover = getCharacterDataFromElement(line);

                savepicture();

            }
        }
        catch (Exception x)
        {

        }

    }
    private static String getCharacterDataFromElement(Element e) {
        Node child = e.getFirstChild();
        if (child instanceof CharacterData) {
            CharacterData cd = (CharacterData) child;
            return cd.getData();
        }
        return "";
    }

    public String getImage()
    {
        return cover;
    }

    public String getGameTitle()
    {
    	if(GameTitle == null){
    		return "Unknown Game";
    	}else
        return GameTitle;
    }

    public String getID()
    {
        return ID;
    }

    public void savepicture()
    {
        new SaveData().savepicture(cover, ID);
    }

    public String getFolderName()
    {
        return FolderName;
    }

    public String getDeck()
    {
        return Deck;
    }

    public String getpath()
    {
        return directory;
    }
}
