import java.io.File;
import java.util.*;

import javafx.application.Platform;

class GameScanner {
    private final String directory;
    private String[] directories;
    private static volatile ArrayList<Game> Games = new ArrayList<>();
    private final SetupController controller;
    private final MainMenuController parent;
    private float progress;
    private static volatile int activethreads;
    private int totalthreads;
    private static volatile int numberofthreads = 0;

    public GameScanner(String directory, SetupController controller, MainMenuController parent) //Constructor
    {
        this.parent = parent;
        this.controller = controller;
        this.directory = directory;
        ScanDirectory();
        Gameinfo();
    }

    private void ScanDirectory() //Maakt een array met de namen van alle bestanden en mappen in de opgegeven directory
    {
        File file = new File(directory);

        directories = file.list();
    }

    public void task(int i)
    {



        File f = new File(directory + directories[i]);

        if(f.isDirectory())
        {
            String temp = directory + directories[i];
            directories[i] = directories[i].replace(' ', '.');

            if(parent.newgame(directories[i]))
            {
                Game tempgame = new Game(directories[i], temp);
                Platform.runLater(() -> controller.SetGameName(Games.get(Games.size() - 1).getGameTitle()));
                this.DecreaseActiveThreads(i, tempgame);
            }
        }

        progress =(float) (100.00 - (activethreads * 100.00 / totalthreads));
        Platform.runLater(() -> controller.SetProgress(progress));
        Platform.runLater(controller::DisableInterface);
        if(activethreads == 0)
        {
            Platform.runLater(controller::EnableInterface);
            Platform.runLater(() -> controller.SetGameName("Scan Complete"));
            if(Games!=null){
            Platform.runLater(() -> parent.setData(Games));
            }
        }
    }

    private void Gameinfo() {

        Parallel_executer[] execute = new Parallel_executer[directories.length];

        activethreads = (directories.length*(directories.length+1))/2;
        totalthreads = activethreads;

        for (int i = 0; i < directories.length; i++) {
            execute[i] = new Parallel_executer(this, i);
            numberofthreads++;
            while (numberofthreads >= 20);
        }
    }

    public static synchronized void DecreaseActiveThreads(int i, Game temp)
    {
        Games.add(temp);
        activethreads = activethreads - (i+1);
        numberofthreads--;
    }

}
