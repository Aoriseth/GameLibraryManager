import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.stage.DirectoryChooser;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.TextField;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;

import java.io.File;
import java.util.ArrayList;
import java.util.HashSet;

public class SetupController extends Thread
{
	private static double xOffset = 0;
    private static double yOffset = 0;
    private GameScanner scan;
    private MainMenuController parent;
    private HashSet<String> libraries = new HashSet<String>();
    @FXML
    private ProgressBar progress;
    @FXML
    private Button Start;
    @FXML
    private Button Close;
    @FXML
    private Label gameName;
    @FXML
    private ComboBox<String> librarySelect;
    @FXML
    private TextField Path;
    @FXML
    private Stage dialogStage;
    @FXML
    private Pane grabBar;
    @FXML
	private Button removeLibrary;
    @FXML
	private Button Open;

    public SetupController()
    {}

    public void setParent(MainMenuController parent)
    {
    	libraries.clear();
        this.parent = parent;
        setLibraries();
        grabBar.setOnMousePressed(new EventHandler<MouseEvent>() {
			@Override
            public void handle(MouseEvent event) {
                xOffset = dialogStage.getX() - event.getScreenX();
                yOffset = dialogStage.getY() - event.getScreenY();
            }
        });
        grabBar.setOnMouseDragged(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
            	dialogStage.setX(event.getScreenX() + xOffset);
            	dialogStage.setY(event.getScreenY() + yOffset);
            }
        });
    }

    private void setLibraries() {
    	for (Game test:parent.games){
    		String temp = new StringBuilder(test.directory).reverse().toString();
			temp = temp.split("\\\\",2)[1];
			temp = new StringBuilder(temp).reverse().toString();
			temp = temp + "\\";
			libraries.add(temp);	
    	}
    	librarySelect.getItems().clear();
        if(libraries!=null){
        	librarySelect.getItems().addAll(libraries);
        }
     
	}

	public void setDialogStage(Stage dialogStage)
    {
        this.dialogStage = dialogStage;
    }

	@FXML
    private void HandleStart()
    {
        Thread th;
		
    	if(Path.getText()!=null){
	        File f = new File(Path.getText());
	
	        if (f.exists())
	        {
	        	libraries.add(Path.getText());
	        	setLibraries();
	        	gameName.setText("Starting Scan...");
	        	SetProgress(0);
	            th = new Thread(this, "Game Scanner");
	            th.start();
	        }
	        else
	        {Path.setText("Path not found");}
    	}
    	else
    	{Path.setText("Path not found");}
    }

    public void SetProgress(float percent)
    {
        progress.setProgress(percent/100);
    }

    @FXML
    private void HandleCancel()
    {
    	if(scan != null){
            //parent.setData(scan.getGames());
		}
        dialogStage.close();
    }
    
    @FXML
    private void HandleOpen()
    {
    	DirectoryChooser directoryChooser = new DirectoryChooser();
    	File file = directoryChooser.showDialog(null);
    	
        if(file == null){
            Path.setText("No Directory selected");
        }else{
        	char[] dir = file.getAbsolutePath().toCharArray();
        	if(dir[dir.length-1]=='\\'){
        		Path.setText(file.getAbsolutePath());
        	}else{
        		Path.setText(file.getAbsolutePath() + "\\");
        	}
        }
        Path.requestFocus();
    }
    
    @FXML
    private void HandleRemoveLibrary()
    {
    	ArrayList<Game> remove = new ArrayList<Game>();
    	for( Game curGam:parent.games){
    		String temp = new StringBuilder(curGam.directory).reverse().toString();
			temp = temp.split("\\\\",2)[1];
			temp = new StringBuilder(temp).reverse().toString();
			temp = temp + "\\";
			
    		if (temp.equals(librarySelect.getValue())){
    			remove.add(curGam);
    		}
    	}
    	for(Game curGame:remove){
            File f = new File("SaveData\\" + curGame.getID() + ".png");
            f.delete();
    		parent.games.remove(curGame);
    	}
    	
    	libraries.clear();
        parent.setData(new ArrayList<Game>() );
        librarySelect.setValue(null);
        librarySelect.getSelectionModel().clearSelection();
        librarySelect.getItems().clear();
        setLibraries();
        
    }

    public void run()
    {
        scan = new GameScanner(Path.getText(), this, parent);
    }

    public void SetGameName(String string) {
		gameName.setText(string);
	}

	public void EnableInterface() {
		Start.setDisable(false);
		librarySelect.setDisable(false);
		Open.setDisable(false);
		removeLibrary.setDisable(false);
		Path.setDisable(false);
	}

	public void DisableInterface() {
		Start.setDisable(true);
		librarySelect.setDisable(true);
		Open.setDisable(true);
		removeLibrary.setDisable(true);
		Path.setDisable(true);
	}
}