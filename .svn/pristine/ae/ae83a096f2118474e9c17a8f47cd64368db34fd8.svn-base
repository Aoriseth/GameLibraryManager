import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.*;
import javafx.stage.Stage;

import java.awt.*;
import java.io.*;
import java.util.ArrayList;

public class MainMenuController {

    @FXML
    private Button cover1;
    @FXML
    private Button cover2;
    @FXML
    private Button cover3;
    @FXML
    private Button cover4;
    @FXML
    private Button cover5;
    @FXML
    private Button cover6;
    @FXML
    private Button cover7;
    @FXML
    private Button cover8;
    @FXML
    private Button cover9;
    @FXML
    private Button cover10;

    @FXML
    private Button minimize;

    @FXML
    private Button left;

    @FXML
    private Button right;

    @FXML
    private ImageView background;

    @FXML
    private AnchorPane overlay;

    @FXML
    private ImageView DetailCover;

    @FXML
    private Label Description;

    @FXML
    private GridPane list;

    @FXML
    private Label Gametitle;

    @FXML
    private Button DetailsPrevious;

    @FXML
    private Button DetailsNext;

    @FXML
    private TextField Target;

    @FXML
    private TextField SaveLocation;

    @FXML
    private Button GoTarget;

    @FXML
    private Button GoSaveLocation;

    @FXML
    private Button DetailEdit;

    @FXML
    private Button DetailsBack;

    @FXML
    private Button DetailsRemove;

    @FXML
    private TextArea EditDeck;

    @FXML
    private TextField EditGameTitle;

    @FXML
    private TextField EditImageURL;

    @FXML
    private Label ImageURL;

    @FXML
    private Button LaunchGames;

    Main mainApp;
    SaveData datasaver = new SaveData();
    ArrayList<Game> games = new ArrayList<>();
    int currentpage=0, pages = 0, SelectedGameindex = 0;
    boolean DetailEditMode = false;
    Game SelectedGame;

    public boolean newgame(String foldername)
    {
        for(int i = 0; i< this.games.size(); i++)
        {
            if(foldername.equals(games.get(i).getFolderName()))
            {
                return false;
            }
        }

        return true;
    }

    public void setData(ArrayList<Game> games)
    {
        for(int i = 0; i<games.size(); i++)
        {
            if (games.get(i).getImage() == null)
            {
                games.remove(i);
                i--;
            }
        }

        this.games.addAll(games);
        pages = (int) Math.ceil(((this.games.size()+1)/10.0)-1);
        if (currentpage < pages)
        {
            right.setVisible(true);
        }
        setImages();
        datasaver.save(this.games);

    }

    public void setImages()
    {
        Image image;

        cover1.setVisible(false);
        cover2.setVisible(false);
        cover3.setVisible(false);
        cover4.setVisible(false);
        cover5.setVisible(false);
        cover6.setVisible(false);
        cover7.setVisible(false);
        cover8.setVisible(false);
        cover9.setVisible(false);
        cover10.setVisible(false);

        for(int i = 0; i<games.size()+1; i++)
        {

            if(i < games.size())
            {
                File in = new File("SaveData\\" + this.games.get(i).getID() + ".png");

                if(in.exists())
                {
                    image = new Image(in.toURI().toString());
                    InitButtons(i, image);
                }
                else
                {
                    this.games.get(i).savepicture();
                    image = new Image(in.toURI().toString());
                    InitButtons(i, image);
                }

            }
            else
            {
                image = new Image("deep_purple.png");
                InitButtons(i, image);
            }

        }

    }

    private void InitButtons(int i, Image image)
    {

        switch (i - (currentpage*10)) {
            case 0:
                cover1.setVisible(true);
                cover1.setBackground(new Background(new BackgroundImage(image, BackgroundRepeat.SPACE, BackgroundRepeat.SPACE, BackgroundPosition.CENTER, new BackgroundSize(229,310,false,false,false,false))));
                break;
            case 1:
                cover2.setVisible(true);
                cover2.setBackground(new Background(new BackgroundImage(image, BackgroundRepeat.REPEAT, BackgroundRepeat.REPEAT, BackgroundPosition.CENTER, new BackgroundSize(229,310,false,false,false,false))));
                break;
            case 2:
                cover3.setVisible(true);
                cover3.setBackground(new Background(new BackgroundImage(image, BackgroundRepeat.REPEAT, BackgroundRepeat.REPEAT, BackgroundPosition.CENTER, new BackgroundSize(229,310,false,false,false,false))));
                break;
            case 3:
                cover4.setVisible(true);
                cover4.setBackground(new Background(new BackgroundImage(image, BackgroundRepeat.REPEAT, BackgroundRepeat.REPEAT, BackgroundPosition.CENTER, new BackgroundSize(229,310,false,false,false,false))));
                break;
            case 4:
                cover5.setVisible(true);
                cover5.setBackground(new Background(new BackgroundImage(image, BackgroundRepeat.REPEAT, BackgroundRepeat.REPEAT, BackgroundPosition.CENTER, new BackgroundSize(229,310,false,false,false,false))));
                break;
            case 5:
                cover6.setVisible(true);
                cover6.setBackground(new Background(new BackgroundImage(image, BackgroundRepeat.REPEAT, BackgroundRepeat.REPEAT, BackgroundPosition.CENTER, new BackgroundSize(229,310,false,false,false,false))));
                break;
            case 6:
                cover7.setVisible(true);
                cover7.setBackground(new Background(new BackgroundImage(image, BackgroundRepeat.REPEAT, BackgroundRepeat.REPEAT, BackgroundPosition.CENTER, new BackgroundSize(229,310,false,false,false,false))));
                break;
            case 7:
                cover8.setVisible(true);
                cover8.setBackground(new Background(new BackgroundImage(image, BackgroundRepeat.REPEAT, BackgroundRepeat.REPEAT, BackgroundPosition.CENTER, new BackgroundSize(229,310,false,false,false,false))));
                break;
            case 8:
                cover9.setVisible(true);
                cover9.setBackground(new Background(new BackgroundImage(image, BackgroundRepeat.REPEAT, BackgroundRepeat.REPEAT, BackgroundPosition.CENTER, new BackgroundSize(229,310,false,false,false,false))));
                break;
            case 9:
                cover10.setVisible(true);
                cover10.setBackground(new Background(new BackgroundImage(image, BackgroundRepeat.REPEAT, BackgroundRepeat.REPEAT, BackgroundPosition.CENTER, new BackgroundSize(229,310,false,false,false,false))));
                break;
            default:
                break;
        }
    }

    public void setMainApp(Main mainApp) {
        this.mainApp = mainApp;
        background.setImage(new Image("SKINDEFAULT.jpg"));
        cover1.setVisible(true);
        cover1.setBackground(new Background(new BackgroundImage(new Image("deep_purple.png"), BackgroundRepeat.SPACE, BackgroundRepeat.SPACE, BackgroundPosition.CENTER, new BackgroundSize(229, 310, false, false, false, false))));
        left.setVisible(false);
        right.setVisible(false);
        overlay.setVisible(false);
        loadsave();
        }

    private void ShowDetails(int button)
    {
        if(!DetailEditMode)
        {
            SelectedGame = games.get(button + (currentpage * 10));
            SelectedGameindex = button + (currentpage * 10);

            if (SelectedGameindex == 0)
                DetailsPrevious.setDisable(true);
            else
                DetailsPrevious.setDisable(false);

            if (SelectedGameindex == (games.size() - 1))
                DetailsNext.setDisable(true);
            else
                DetailsNext.setDisable(false);

            DetailsBack.setDisable(false);

            list.setVisible(false);
            left.setVisible(false);
            right.setVisible(false);

            Image temp;
            File in = new File("SaveData\\" + SelectedGame.getID() + ".png");

            if (in.exists()) {
                temp = new Image(in.toURI().toString());
            } else {
                SelectedGame.savepicture();
                temp = new Image(in.toURI().toString());
            }

            if((Target.getText()+SaveLocation.getText()+EditGameTitle.getText()+EditImageURL.getText()+EditDeck.getText()).equals("")) {
                EditImageURL.setText(SelectedGame.getImage());
                EditDeck.setText(SelectedGame.getDeck());
                EditGameTitle.setText(SelectedGame.getGameTitle());
            }
            else
            {
                SelectedGame.setCover(EditImageURL.getText());
                SelectedGame.setDeck(EditDeck.getText());
                SelectedGame.setGameTitle(EditGameTitle.getText());
                SelectedGame.setExe(Target.getText());
                SelectedGame.setSaveLocation(SaveLocation.getText());
                datasaver.save(games);
            }


            Target.setText(SelectedGame.getExe().toString());
            if (SelectedGame.saveLocation != null)
                SaveLocation.setText(SelectedGame.getSaveLocation());
            DetailCover.setImage(temp);
            Description.setText(SelectedGame.getDeck());
            Gametitle.setText(SelectedGame.getGameTitle());

            overlay.setVisible(true);
            GoTarget.setDisable(false);
            GoSaveLocation.setDisable(false);
            LaunchGames.setDisable(false);

            File test = new File(Target.getText());

            if (!test.exists()) {
                GoTarget.setDisable(true);
                LaunchGames.setDisable(true);
            }

            test = new File(SaveLocation.getText());
            if (!test.exists()) {
                GoSaveLocation.setDisable(true);
            }

            DetailEdit.setText("Edit Data");
            DetailsRemove.setText("Remove");
            Target.setDisable(true);
            SaveLocation.setDisable(true);
            ImageURL.setVisible(false);
            EditImageURL.setVisible(false);
            EditDeck.setVisible(false);
            EditGameTitle.setVisible(false);
        }
        else
        {
            DetailsBack.setDisable(true);
            DetailsNext.setDisable(true);
            DetailsPrevious.setDisable(true);
            DetailEdit.setText("Done");
            Target.setDisable(false);
            SaveLocation.setDisable(false);
            DetailsRemove.setText("Reset");
            ImageURL.setVisible(true);
            EditImageURL.setVisible(true);
            EditDeck.setVisible(true);
            EditGameTitle.setVisible(true);


        }
    }

    public MainMenuController()
    {
    }

    public void loadsave()
    {
        try
        {
            InputStream in = new FileInputStream("SaveData\\Data.ser");
            InputStream buffer = new BufferedInputStream(in);
            ObjectInput input = new ObjectInputStream(buffer);

            try
            {
                ArrayList<Game> temp = (ArrayList<Game>) input.readObject();
                setData(temp);
            }
            catch (ClassNotFoundException c)
            {

            }

        }
        catch (IOException x)
        {

        }

    }

    public void cleanup()
    {
        for(int i = 0; i<games.size(); i++)
        {
            if(!new File(games.get(i).directory).exists())
            {
                File f = new File("SaveData\\" + this.games.get(i).getID() + ".png");
                f.delete();
                games.remove(i);
            }
        }
        datasaver.save(this.games);
    }


    //De handlers voor de GUI staren hier
    @FXML
    public void handlecover1()
    {
        Target.setText("");
        SaveLocation.setText("");
        EditDeck.setText("");
        EditGameTitle.setText("");
        EditImageURL.setText("");

        if(games.size() == 0 + (currentpage*10))
        {
            mainApp.showSetup();
        }
        else
        {
            ShowDetails(0);
        }
    }

    @FXML
    public void handlecover2()
    {
        Target.setText("");
        SaveLocation.setText("");
        EditDeck.setText("");
        EditGameTitle.setText("");
        EditImageURL.setText("");

    	if(games.size() == 1 + (currentpage*10))
        {
            mainApp.showSetup();
        }
        else
        {
            ShowDetails(1);
        }
    }

    @FXML
    public void handlecover3()
    {
        Target.setText("");
        SaveLocation.setText("");
        EditDeck.setText("");
        EditGameTitle.setText("");
        EditImageURL.setText("");

    	if(games.size() == 2 + (currentpage*10))
        {
            mainApp.showSetup();
        }
        else
        {
            ShowDetails(2);
        }
    }

    @FXML
    public void handlecover4()
    {
        Target.setText("");
        SaveLocation.setText("");
        EditDeck.setText("");
        EditGameTitle.setText("");
        EditImageURL.setText("");

    	if(games.size() == 3 + (currentpage*10))
        {
            mainApp.showSetup();
        }
        else
        {
            ShowDetails(3);
        }
    }

    @FXML
    public void handlecover5()
    {
        Target.setText("");
        SaveLocation.setText("");
        EditDeck.setText("");
        EditGameTitle.setText("");
        EditImageURL.setText("");

    	if(games.size() == 4 + (currentpage*10))
        {
            mainApp.showSetup();
        }
        else
        {
            ShowDetails(4);
        }
    }

    @FXML
    public void handlecover6()
    {
        Target.setText("");
        SaveLocation.setText("");
        EditDeck.setText("");
        EditGameTitle.setText("");
        EditImageURL.setText("");

    	if(games.size() == 5 + (currentpage*10))
        {
            mainApp.showSetup();
        }
        else
        {
            ShowDetails(5);
        }
    }

    @FXML
    public void handlecover7()
    {
        Target.setText("");
        SaveLocation.setText("");
        EditDeck.setText("");
        EditGameTitle.setText("");
        EditImageURL.setText("");

    	if(games.size() == 6 + (currentpage*10))
        {
            mainApp.showSetup();
        }
        else
        {
            ShowDetails(6);
        }
    }

    @FXML
    public void handlecover8()
    {
        Target.setText("");
        SaveLocation.setText("");
        EditDeck.setText("");
        EditGameTitle.setText("");
        EditImageURL.setText("");

    	if(games.size() == 7  + (currentpage*10))
        {
            mainApp.showSetup();
        }
        else
        {
            ShowDetails(7);
        }
    }

    @FXML
    public void handlecover9()
    {
        Target.setText("");
        SaveLocation.setText("");
        EditDeck.setText("");
        EditGameTitle.setText("");
        EditImageURL.setText("");

    	if(games.size() == 8 + (currentpage*10))
        {
            mainApp.showSetup();
        }
        else
        {
            ShowDetails(8);
        }
    }

    @FXML
    public void handlecover10()
    {
        Target.setText("");
        SaveLocation.setText("");
        EditDeck.setText("");
        EditGameTitle.setText("");
        EditImageURL.setText("");

    	if(games.size() == 9 + (currentpage*10))
        {
            mainApp.showSetup();
        }
        else
        {
            ShowDetails(9);
        }
    }

    @FXML
    public void handleclose()
    {
        System.exit(1);
    }

    @FXML
    public void handleminimize()
    {
        Stage stage=(Stage) minimize.getScene().getWindow();
        stage.setIconified(true);
    }

    @FXML
    public void handleleft()
    {
        currentpage--;
        if(currentpage == 0)
        {
            left.setVisible(false);
        }
        if(currentpage < pages)
        {
            right.setVisible(true);
        }

        setImages();
    }

    @FXML
    public void handleright()
    {
        currentpage++;
        if(currentpage == pages)
        {
            right.setVisible(false);
        }
        if (currentpage > 0)
        {
            left.setVisible(true);
        }
        setImages();
    }

    @FXML
    public void handlecleanup()
    {
        cleanup();
    }

    @FXML
    public void handleDetailNext()
    {
        Target.setText("");
        SaveLocation.setText("");
        EditDeck.setText("");
        EditGameTitle.setText("");
        EditImageURL.setText("");
        ShowDetails(SelectedGameindex+1);
    }

    @FXML
    public void handleDetailPrevious()
    {
        Target.setText("");
        SaveLocation.setText("");
        EditDeck.setText("");
        EditGameTitle.setText("");
        EditImageURL.setText("");
        ShowDetails(SelectedGameindex - 1 - (currentpage * 10));
    }

    @FXML
    public void handleDetailBack()
    {
        overlay.setVisible(false);
        list.setVisible(true);
        right.setVisible(true);
        left.setVisible(false);
        currentpage = (int) Math.ceil((SelectedGameindex+1)/10.0)-1;
        setImages();
        if(currentpage == pages)
        {
            right.setVisible(false);
        }
        if (currentpage > 0)
        {
            left.setVisible(true);
        }
        if(currentpage == 0)
        {
            left.setVisible(false);
        }
        if(currentpage < pages)
        {
            right.setVisible(true);
        }
    }

    @FXML
    public void handleDetailRemove()
    {
        if(DetailEditMode)
        {
            SelectedGame.getInfo();

        }
        else
            games.remove(SelectedGameindex);
        ShowDetails(SelectedGameindex-1-(currentpage*10));
    }

    @FXML
    public void handleDetailEdit()
    {
        DetailEditMode = !DetailEditMode;
        ShowDetails(SelectedGameindex);

    }

    @FXML
    public void handleGoTarget()
    {
        Desktop desk = Desktop.getDesktop();
        try {
            desk.open(new File(SelectedGame.getExe().getParent()));
        }catch (IOException x)
        {

        }
    }

    @FXML
    public void handleLaunchGame()
    {
        Desktop desk = Desktop.getDesktop();
        try {
            desk.open(SelectedGame.getExe());
        }catch (IOException x)
        {

        }
    }

    @FXML
    public void handleGoSaveLocation()
    {
        Desktop desk = Desktop.getDesktop();
        try {
            desk.open(new File(SelectedGame.getSaveLocation()));
        }catch (IOException x)
        {
        }
    }
}
